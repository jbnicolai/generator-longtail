0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.33
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . C:\Users\eguittiere\AppData\Roaming\npm-cache\3a52ce78-.lock
11 verbose tar pack [ 'C:\\Users\\eguittiere\\AppData\\Roaming\\npm-cache\\generator-longtail\\0.1.20\\package.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball C:\Users\eguittiere\AppData\Roaming\npm-cache\generator-longtail\0.1.20\package.tgz
13 verbose folder .
14 info prepublish generator-longtail@0.1.20
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. C:\Users\eguittiere\AppData\Roaming\npm-cache\1f1177db-tar.lock
17 silly lockFile b9af7995-ator-longtail-0-1-20-package-tgz tar://C:\Users\eguittiere\AppData\Roaming\npm-cache\generator-longtail\0.1.20\package.tgz
18 verbose lock tar://C:\Users\eguittiere\AppData\Roaming\npm-cache\generator-longtail\0.1.20\package.tgz C:\Users\eguittiere\AppData\Roaming\npm-cache\b9af7995-ator-longtail-0-1-20-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile b9af7995-ator-longtail-0-1-20-package-tgz tar://C:\Users\eguittiere\AppData\Roaming\npm-cache\generator-longtail\0.1.20\package.tgz
22 silly lockFile b9af7995-ator-longtail-0-1-20-package-tgz tar://C:\Users\eguittiere\AppData\Roaming\npm-cache\generator-longtail\0.1.20\package.tgz
23 silly lockFile 665767a1-enerator-longtail-0-1-20-package C:\Users\eguittiere\AppData\Roaming\npm-cache\generator-longtail\0.1.20\package
24 verbose lock C:\Users\eguittiere\AppData\Roaming\npm-cache\generator-longtail\0.1.20\package C:\Users\eguittiere\AppData\Roaming\npm-cache\665767a1-enerator-longtail-0-1-20-package.lock
25 silly lockFile 665767a1-enerator-longtail-0-1-20-package C:\Users\eguittiere\AppData\Roaming\npm-cache\generator-longtail\0.1.20\package
26 silly lockFile 665767a1-enerator-longtail-0-1-20-package C:\Users\eguittiere\AppData\Roaming\npm-cache\generator-longtail\0.1.20\package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'generator-longtail',
29 silly publish   version: '0.1.20',
29 silly publish   description: 'Yeoman generator',
29 silly publish   license: 'MIT',
29 silly publish   main: 'app/index.js',
29 silly publish   repository:
29 silly publish    { type: 'git',
29 silly publish      url: 'https://github.com/rkgttr/generator-longtail' },
29 silly publish   author:
29 silly publish    { name: 'Erik Guittiere',
29 silly publish      email: 'rkgttr@gmail.com',
29 silly publish      url: 'https://github.com/rkgttr' },
29 silly publish   engines: { node: '>=0.10.0', npm: '>=1.2.10' },
29 silly publish   scripts: { test: 'mocha' },
29 silly publish   files: [ 'app' ],
29 silly publish   keywords: [ 'pure', 'html5', 'jQuery', 'Jade', 'LESS', 'SASS' ],
29 silly publish   dependencies:
29 silly publish    { 'yeoman-generator': '~0.16.0',
29 silly publish      chalk: '~0.4.0',
29 silly publish      yosay: '^0.1.0',
29 silly publish      'compare-version': '~0.1.0',
29 silly publish      multiline: '^0.3.4',
29 silly publish      'pkg-name': '~0.1.0' },
29 silly publish   devDependencies: { mocha: '*' },
29 silly publish   peerDependencies: { yo: '>=1.0.0' },
29 silly publish   readme: '# Longtail Frontend Setup \r\n\r\nThis guide will help you through the process of setting up static frontend projects. This is a simple framework based on [NodeJS][0], [Yeoman][1], [Bower][2] and [Grunt][3] that automate a lot of tasks such as preprocessing your files and minify them. The framework includes:\r\n\r\n* A convenient folder structure.\r\n* A HTML template based on [HTML5 Boilerplate][4].\r\n* An optional set of [Jade][5] templates based on HTML5 Boilerplate to generate your pages.\r\n* Several [LESS][6] files that compile in a single autoprefixed minified CSS files.\r\n* Option to use [SCSS][11], but that bit is a work in progress.\r\n* A CSS grid framework based on [PureCSS][7].\r\n* [jQuery][8] and a few JavaScript helpers that compile in a single minified JavaScript file.\r\n* An image minifier.\r\n* A simple webserver that reloads automatically when you make changes.\r\n* A [Grunt][3] observer that automatically compile your changes on LESS and JavaScript files.\r\n\r\nAs the framework may evolve to include more options (such as including other JavaScript libraries like [AngularJS][9], or other pre-processors like [Stylus][10], ...), I strongly suggest that you subscribe to this Github project. This way you will get email notifications when a change is available and you will be able to update by reinstalling the [npm][13].\r\n\r\nFor editing code, I suggest that you use [Sublime Text][14] with [Package Control][15] to extends its functionalies. This is the best and most extensible editor at the moment, simple as that.\r\n\r\n## Global Configuration\r\n\r\nThe following needs to be done once.\r\n\r\n[Install GIT][16]  \r\n\r\nImportant for Windows users, you must install msysgit correctly. Be sure to check the option shown below:  \r\n![](http://demo.longtail.com.au/frontend/img/build/mysgit.png)\r\n\r\n[Install NodeJs][0]\r\n\r\nOpen a console (Windows: `Win+R` then type `cmd` then press Enter, Mac: `Command+Space` then type `terminal` then press Enter)\r\n\r\nInstall Grunt by entering the following command:\r\n\r\n    npm install -g grunt-cli\r\n\r\n And press Enter\r\n\r\nInstall Bower by entering the following command:\r\n\r\n    npm install -g bower\r\n\r\n And press Enter\r\n\r\nInstall Yeoman by entering the following command:\r\n\r\n    npm install -g yo\r\n\r\n And press Enter\r\n\r\nInstall the project generator by entering the following command:\r\n\r\n    npm install -g generator-longtail\r\n\r\nAnd press Enter\r\n\r\n## Project Configuration\r\n\r\nThe following needs to be done per project.\r\n\r\n\r\nCreate a folder\r\n\r\n\r\nMove into this folder then `shift + right click` and select "Open command window here", on Mac open a Terminal and move to this folder (`cd \\[your-path\\]`) or go to `System Preferences \\> Keyboard \\> Keyboard Shortcuts \\> Services` and enable `New Terminal at Folder` and the service will appear by `right click` or `Control + click` on the folder.\r\n\r\n\r\nIn the console that opens, type:\r\n\r\n\tyo longtail\r\n\r\nPress Enter and answer the few questions about the project name, description and version. If you want to use the [Jade templating engine][5], answer **yes** to the `Use Jade templating engine` question. I strongly recommend using Jade as it\'s a very powerful templating engine. Once you\'ve adopted it, standard HTML coding looks like stone age.\r\n\r\nYou can choose to use [SCSS][11] instead of [LESS][6].\r\n\r\nIf you answer **yes** to the `ASPX form included in the markup` question, what the template does is adding a form tag after the body to encapsulate your page content. This may impact the style of your page.\r\n\r\nWhen all this is done, all your templates files will be under the app folder, here you will find one .bat file (or .command file on Mac): `launchgrunt`\r\n\r\n`launchgrunt` first compiles all your files (js + less, etc.), launches a web server, watches any changes you make to re-compile on the fly, and finally refreshes the server.\r\n\r\nOpen [http://localhost:8080/][17] to see this in action.\r\n\r\n## Start Working\r\n\r\nFollowing are a few things to keep in mind when you work on your project:\r\n\r\n\r\nDon\'t forget to launch app/launchgrunt before working on your project.\r\n\r\nOpen [http://localhost:8080/][17].\r\n\r\nThere are two main folders in your `app/` folder: `app/build/` and `app/src/`. `app/build/` contains the compiled, concatenated and minified files you will deploy. `app/src/` contains your working files. Only exception is the HTML templates (when you don\'t use Jade) which are editable directly into `app/build/`. Save all your HTML templates either on the app/build/ folder, either on the app/build/templates folder. \r\nAlternatively, if you use Jade, save your Jade templates into the `app/src/jade folder`, and all your included Jade templates into the `app/src/jade/includes` folder. All generated HTML files will end up in the `app/build/` folder.\r\n\r\nAlways write your JavaScript into `app/src/js/main.js`\r\n\r\nAdd any jQuery plugins or JavaScript helpers into `app/src/js/plugins.js`\r\n\r\nDon\'t forget to change your favicon and the IOS and Windows special icons/tiles on the `app/build/` folder.\r\n\r\nAlways put your images into `app/src/img/`. If you delete an image, it will not be deleted on the `app/build/img/` folder, do it manually.\r\n\r\nIf you want to commit your work on SVN or any version control system, don\'t commit the `node\\_modules` folder. Create a rule to exclude them.\r\n\r\n### Using LESS\r\n\r\nWrite your main styles into `app/src/less/main.less`. You can create more `less` files if you want to structure your project differently. You just have to import these files into `app/src/less/main.less` with the `@import` directive.\r\n\r\nYou can write all your mediaqueries as you go by nesting them directly in your code. For example:\r\n\r\n    .selector{\r\n        color: blue;\r\n        @media screen and (min-width: 768px) {\r\n            color: white;\r\n        @media @my-mediaquery-variable {\r\n            color: red;\r\n        }\r\n    }\r\n\r\nFor more convenience, a few common breakpoint variables have been added to `app/src/less/variables.less`. You can add more breakpoints here if you want, or edit/delete the ones that already exist. Don\'t forget that IE8 doesn\'t support mediaqueries so you will need to have a desktop first approach if you need to support IE8.\r\n\r\n#### The grid system\r\n\r\nThe grid system is based on [PureCSS][7] in term of philosophy: meaning it uses `display:flex` and fallbacks to `display:inline-block` for older browsers. No `float` here. There are no grid unit classes in the framework, just two useful mixins to build your grids.\r\n\r\n##### The grid units container\r\n\r\nFirst one is the `.unit-wrapper` mixin. Which create the container for your grid units, and works like this:\r\n\r\n    .unit-wrapper(~".your-wrapper-class-name");\r\n    /* or */\r\n    .unit-wrapper(~".your-wrapper-class-name, header, .other-class-name");\r\n\r\nIf you have several grid containers, use the second syntax above as it will save a couple of bytes in the compiled file and will avoid redundancy.\r\n\r\n##### The grid unit\r\n\r\nSecond mixin is the grid unit mixin, simply called `.unit`, and it works like this:\r\n\r\n    .your-selector {\r\n        .unit(1/2);\r\n    }\r\n    /* or */\r\n    .your-selector {\r\n        .unit(1, 1/2, ~"screen and (min-width: 980px)", 1/3, ~"screen and (min-width: 1200px)");\r\n    }\r\n    /* or */\r\n    .your-selector {\r\n        .unit(0.5, 1/2, @my-mediaquery-variable, 1/3, @my-other-ediaquery-variable);\r\n    }\r\n\r\nSo in short, the first arguments is the base width of you grid unit, which will render as a percentage. e.g. `1` will be `100%`, `1/3` will be `33.3334%`, `0.5` will be `50%`. If you\'re on a mobile first approach, this will be the mobile width of your unit. If you\'re on a desktop first approach, this will be the desktop width of your unit. The other arguments are optional, they are mediaqueries and they define how your unit will react depending on several breakpoints. All the other arguments go by pair: the width of the unit, and the corresponding mediaquery. i.e.: width, mediaquery, width, mediaquery, ... You can have as many breakpoints as you want, and you can use LESS variables that contain mediaqueries strings for more convenience.\r\n\r\n### Using SCSS\r\n\r\nThe SASS folders are broken up based loosely on the principles outlines in [SMACSS - Scalable and Modular Architecture for CSS](https://smacss.com/) and is intended to be used with a MOBILE FIRST approach.\r\n\r\nBase: \r\nbase.scss - Headings, typography, resets etc.\r\nfonts.scss - Font Face, Icon Fonts.\r\nnormalize.scss - CSS reset for SCSS\r\n\r\nLayout:\r\nCreate individual SCSS files here for different sections of the website e.g header, footer, front-page etc.\r\n\r\nModules:\r\nCreate SCSS files for reusable modules or elements in the website e.g buttons, slideshows, galleries, forms etc.\r\n\r\nTools:\r\nmixins.scss - Add your mixins here.\r\nvariables.scss - Set your variables here, font colours, media queries etc.\r\n\r\nRemember when adding a file, you must also add it to `main.scss`.\r\n\r\nMedia Queries are set in _variables.scss and are called when needed. e.g:\r\n\t\t.myelement {\r\n\t\t\tcolor: red;\r\n\t\t\t\r\n\t\t\t@include media($medium) {\r\n\t\t\t\tcolor: blue;\r\n\t\t\t}\r\n\t\t}\r\n\r\nIncluded is Bourbon and Bourbon Neat (Grid System). These come with some helpful mixins and a handy grid system.\r\n[Bourbon](http://bourbon.io/docs/)\r\n[Bourbon Neat](http://thoughtbot.github.io/neat-docs/latest/)\r\n\r\nAny bug? [Let me know][18].\r\n\r\n\r\n[0]: http://nodejs.org/\r\n[1]: http://yeoman.io/\r\n[2]: http://bower.io/\r\n[3]: http://gruntjs.com/\r\n[4]: http://html5boilerplate.com/\r\n[5]: http://jade-lang.com/\r\n[6]: http://lesscss.org/\r\n[7]: http://purecss.io/\r\n[8]: https://jquery.org/\r\n[9]: https://angularjs.org/\r\n[10]: http://learnboost.github.io/stylus/\r\n[11]: http://sass-lang.com/\r\n[12]: https://github.com/rkgttr/generator-longtail\r\n[13]: #npm\r\n[14]: http://www.sublimetext.com/2\r\n[15]: https://sublime.wbond.net/\r\n[16]: http://git-scm.com/downloads\r\n[17]: http://localhost:8080/\r\n[18]: mailto:eguittiere@longtail.com.au\r\n\r\n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: 'f75cb8c22d63ac33aba78adaf5332ad32dd4ecde',
29 silly publish   bugs: { url: 'https://github.com/rkgttr/generator-longtail/issues' },
29 silly publish   homepage: 'https://github.com/rkgttr/generator-longtail',
29 silly publish   _id: 'generator-longtail@0.1.20',
29 silly publish   _shasum: '701bb5a2a42a4ffd15075fec950aeb154e75cede',
29 silly publish   _from: '.' }
30 verbose request where is /generator-longtail
31 verbose request registry http://registry.npmjs.org/
32 verbose request id ff27152026b52240
33 verbose url raw /generator-longtail
34 verbose url resolving [ 'http://registry.npmjs.org/', './generator-longtail' ]
35 verbose url resolved http://registry.npmjs.org/generator-longtail
36 verbose request where is http://registry.npmjs.org/generator-longtail
37 info trying registry request attempt 1 at 10:16:43
38 http PUT http://registry.npmjs.org/generator-longtail
39 http 403 http://registry.npmjs.org/generator-longtail
40 verbose headers { server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '15538',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   date: 'Mon, 19 Jan 2015 02:16:43 GMT',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   connection: 'keep-alive',
40 verbose headers   'x-served-by': 'cache-syd1622-SYD',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1421633803.113417,VS0,VE725' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 0.1.20
42 error old={"name":"generator-longtail","version":"0.1.20","description":"Yeoman generator","license":"MIT","main":"app/index.js","repository":{"type":"git","url":"https://github.com/rkgttr/generator-longtail"},"author":{"name":"Erik Guittiere","email":"rkgttr@gmail.com","url":"https://github.com/rkgttr"},"engines":{"node":">=0.10.0","npm":">=1.2.10"},"scripts":{"test":"mocha"},"files":["app"],"keywords":["pure","html5","jQuery","Jade","LESS","SASS"],"dependencies":{"yeoman-generator":"~0.16.0","chalk":"~0.4.0","yosay":"^0.1.0","compare-version":"~0.1.0","multiline":"^0.3.4","pkg-name":"~0.1.0"},"devDependencies":{"mocha":"*"},"peerDependencies":{"yo":">=1.0.0"},"gitHead":"f75cb8c22d63ac33aba78adaf5332ad32dd4ecde","bugs":{"url":"https://github.com/rkgttr/generator-longtail/issues"},"homepage":"https://github.com/rkgttr/generator-longtail","_id":"generator-longtail@0.1.20","_shasum":"701bb5a2a42a4ffd15075fec950aeb154e75cede","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"rkgttr","email":"rkgttr@gmail.com"},"maintainers":[{"name":"rkgttr","email":"rkgttr@gmail.com"}],"dist":{"shasum":"701bb5a2a42a4ffd15075fec950aeb154e75cede","tarball":"http://registry.npmjs.org/generator-longtail/-/generator-longtail-0.1.20.tgz"}}
42 error new={"name":"generator-longtail","version":"0.1.20","description":"Yeoman generator","license":"MIT","main":"app/index.js","repository":{"type":"git","url":"https://github.com/rkgttr/generator-longtail"},"author":{"name":"Erik Guittiere","email":"rkgttr@gmail.com","url":"https://github.com/rkgttr"},"engines":{"node":">=0.10.0","npm":">=1.2.10"},"scripts":{"test":"mocha"},"files":["app"],"keywords":["pure","html5","jQuery","Jade","LESS","SASS"],"dependencies":{"yeoman-generator":"~0.16.0","chalk":"~0.4.0","yosay":"^0.1.0","compare-version":"~0.1.0","multiline":"^0.3.4","pkg-name":"~0.1.0"},"devDependencies":{"mocha":"*"},"peerDependencies":{"yo":">=1.0.0"},"readme":"# Longtail Frontend Setup \u000d\u000a\u000d\u000aThis guide will help you through the process of setting up static frontend projects. This is a simple framework based on [NodeJS][0], [Yeoman][1], [Bower][2] and [Grunt][3] that automate a lot of tasks such as preprocessing your files and minify them. The framework includes:\u000d\u000a\u000d\u000a* A convenient folder structure.\u000d\u000a* A HTML template based on [HTML5 Boilerplate][4].\u000d\u000a* An optional set of [Jade][5] templates based on HTML5 Boilerplate to generate your pages.\u000d\u000a* Several [LESS][6] files that compile in a single autoprefixed minified CSS files.\u000d\u000a* Option to use [SCSS][11], but that bit is a work in progress.\u000d\u000a* A CSS grid framework based on [PureCSS][7].\u000d\u000a* [jQuery][8] and a few JavaScript helpers that compile in a single minified JavaScript file.\u000d\u000a* An image minifier.\u000d\u000a* A simple webserver that reloads automatically when you make changes.\u000d\u000a* A [Grunt][3] observer that automatically compile your changes on LESS and JavaScript files.\u000d\u000a\u000d\u000aAs the framework may evolve to include more options (such as including other JavaScript libraries like [AngularJS][9], or other pre-processors like [Stylus][10], ...), I strongly suggest that you subscribe to this Github project. This way you will get email notifications when a change is available and you will be able to update by reinstalling the [npm][13].\u000d\u000a\u000d\u000aFor editing code, I suggest that you use [Sublime Text][14] with [Package Control][15] to extends its functionalies. This is the best and most extensible editor at the moment, simple as that.\u000d\u000a\u000d\u000a## Global Configuration\u000d\u000a\u000d\u000aThe following needs to be done once.\u000d\u000a\u000d\u000a[Install GIT][16]  \u000d\u000a\u000d\u000aImportant for Windows users, you must install msysgit correctly. Be sure to check the option shown below:  \u000d\u000a![](http://demo.longtail.com.au/frontend/img/build/mysgit.png)\u000d\u000a\u000d\u000a[Install NodeJs][0]\u000d\u000a\u000d\u000aOpen a console (Windows: `Win+R` then type `cmd` then press Enter, Mac: `Command+Space` then type `terminal` then press Enter)\u000d\u000a\u000d\u000aInstall Grunt by entering the following command:\u000d\u000a\u000d\u000a    npm install -g grunt-cli\u000d\u000a\u000d\u000a And press Enter\u000d\u000a\u000d\u000aInstall Bower by entering the following command:\u000d\u000a\u000d\u000a    npm install -g bower\u000d\u000a\u000d\u000a And press Enter\u000d\u000a\u000d\u000aInstall Yeoman by entering the following command:\u000d\u000a\u000d\u000a    npm install -g yo\u000d\u000a\u000d\u000a And press Enter\u000d\u000a\u000d\u000aInstall the project generator by entering the following command:\u000d\u000a\u000d\u000a    npm install -g generator-longtail\u000d\u000a\u000d\u000aAnd press Enter\u000d\u000a\u000d\u000a## Project Configuration\u000d\u000a\u000d\u000aThe following needs to be done per project.\u000d\u000a\u000d\u000a\u000d\u000aCreate a folder\u000d\u000a\u000d\u000a\u000d\u000aMove into this folder then `shift + right click` and select \"Open command window here\", on Mac open a Terminal and move to this folder (`cd \\[your-path\\]`) or go to `System Preferences \\> Keyboard \\> Keyboard Shortcuts \\> Services` and enable `New Terminal at Folder` and the service will appear by `right click` or `Control + click` on the folder.\u000d\u000a\u000d\u000a\u000d\u000aIn the console that opens, type:\u000d\u000a\u000d\u000a\u0009yo longtail\u000d\u000a\u000d\u000aPress Enter and answer the few questions about the project name, description and version. If you want to use the [Jade templating engine][5], answer **yes** to the `Use Jade templating engine` question. I strongly recommend using Jade as it's a very powerful templating engine. Once you've adopted it, standard HTML coding looks like stone age.\u000d\u000a\u000d\u000aYou can choose to use [SCSS][11] instead of [LESS][6].\u000d\u000a\u000d\u000aIf you answer **yes** to the `ASPX form included in the markup` question, what the template does is adding a form tag after the body to encapsulate your page content. This may impact the style of your page.\u000d\u000a\u000d\u000aWhen all this is done, all your templates files will be under the app folder, here you will find one .bat file (or .command file on Mac): `launchgrunt`\u000d\u000a\u000d\u000a`launchgrunt` first compiles all your files (js + less, etc.), launches a web server, watches any changes you make to re-compile on the fly, and finally refreshes the server.\u000d\u000a\u000d\u000aOpen [http://localhost:8080/][17] to see this in action.\u000d\u000a\u000d\u000a## Start Working\u000d\u000a\u000d\u000aFollowing are a few things to keep in mind when you work on your project:\u000d\u000a\u000d\u000a\u000d\u000aDon't forget to launch app/launchgrunt before working on your project.\u000d\u000a\u000d\u000aOpen [http://localhost:8080/][17].\u000d\u000a\u000d\u000aThere are two main folders in your `app/` folder: `app/build/` and `app/src/`. `app/build/` contains the compiled, concatenated and minified files you will deploy. `app/src/` contains your working files. Only exception is the HTML templates (when you don't use Jade) which are editable directly into `app/build/`. Save all your HTML templates either on the app/build/ folder, either on the app/build/templates folder. \u000d\u000aAlternatively, if you use Jade, save your Jade templates into the `app/src/jade folder`, and all your included Jade templates into the `app/src/jade/includes` folder. All generated HTML files will end up in the `app/build/` folder.\u000d\u000a\u000d\u000aAlways write your JavaScript into `app/src/js/main.js`\u000d\u000a\u000d\u000aAdd any jQuery plugins or JavaScript helpers into `app/src/js/plugins.js`\u000d\u000a\u000d\u000aDon't forget to change your favicon and the IOS and Windows special icons/tiles on the `app/build/` folder.\u000d\u000a\u000d\u000aAlways put your images into `app/src/img/`. If you delete an image, it will not be deleted on the `app/build/img/` folder, do it manually.\u000d\u000a\u000d\u000aIf you want to commit your work on SVN or any version control system, don't commit the `node\\_modules` folder. Create a rule to exclude them.\u000d\u000a\u000d\u000a### Using LESS\u000d\u000a\u000d\u000aWrite your main styles into `app/src/less/main.less`. You can create more `less` files if you want to structure your project differently. You just have to import these files into `app/src/less/main.less` with the `@import` directive.\u000d\u000a\u000d\u000aYou can write all your mediaqueries as you go by nesting them directly in your code. For example:\u000d\u000a\u000d\u000a    .selector{\u000d\u000a        color: blue;\u000d\u000a        @media screen and (min-width: 768px) {\u000d\u000a            color: white;\u000d\u000a        @media @my-mediaquery-variable {\u000d\u000a            color: red;\u000d\u000a        }\u000d\u000a    }\u000d\u000a\u000d\u000aFor more convenience, a few common breakpoint variables have been added to `app/src/less/variables.less`. You can add more breakpoints here if you want, or edit/delete the ones that already exist. Don't forget that IE8 doesn't support mediaqueries so you will need to have a desktop first approach if you need to support IE8.\u000d\u000a\u000d\u000a#### The grid system\u000d\u000a\u000d\u000aThe grid system is based on [PureCSS][7] in term of philosophy: meaning it uses `display:flex` and fallbacks to `display:inline-block` for older browsers. No `float` here. There are no grid unit classes in the framework, just two useful mixins to build your grids.\u000d\u000a\u000d\u000a##### The grid units container\u000d\u000a\u000d\u000aFirst one is the `.unit-wrapper` mixin. Which create the container for your grid units, and works like this:\u000d\u000a\u000d\u000a    .unit-wrapper(~\".your-wrapper-class-name\");\u000d\u000a    /* or */\u000d\u000a    .unit-wrapper(~\".your-wrapper-class-name, header, .other-class-name\");\u000d\u000a\u000d\u000aIf you have several grid containers, use the second syntax above as it will save a couple of bytes in the compiled file and will avoid redundancy.\u000d\u000a\u000d\u000a##### The grid unit\u000d\u000a\u000d\u000aSecond mixin is the grid unit mixin, simply called `.unit`, and it works like this:\u000d\u000a\u000d\u000a    .your-selector {\u000d\u000a        .unit(1/2);\u000d\u000a    }\u000d\u000a    /* or */\u000d\u000a    .your-selector {\u000d\u000a        .unit(1, 1/2, ~\"screen and (min-width: 980px)\", 1/3, ~\"screen and (min-width: 1200px)\");\u000d\u000a    }\u000d\u000a    /* or */\u000d\u000a    .your-selector {\u000d\u000a        .unit(0.5, 1/2, @my-mediaquery-variable, 1/3, @my-other-ediaquery-variable);\u000d\u000a    }\u000d\u000a\u000d\u000aSo in short, the first arguments is the base width of you grid unit, which will render as a percentage. e.g. `1` will be `100%`, `1/3` will be `33.3334%`, `0.5` will be `50%`. If you're on a mobile first approach, this will be the mobile width of your unit. If you're on a desktop first approach, this will be the desktop width of your unit. The other arguments are optional, they are mediaqueries and they define how your unit will react depending on several breakpoints. All the other arguments go by pair: the width of the unit, and the corresponding mediaquery. i.e.: width, mediaquery, width, mediaquery, ... You can have as many breakpoints as you want, and you can use LESS variables that contain mediaqueries strings for more convenience.\u000d\u000a\u000d\u000a### Using SCSS\u000d\u000a\u000d\u000aThe SASS folders are broken up based loosely on the principles outlines in [SMACSS - Scalable and Modular Architecture for CSS](https://smacss.com/) and is intended to be used with a MOBILE FIRST approach.\u000d\u000a\u000d\u000aBase: \u000d\u000abase.scss - Headings, typography, resets etc.\u000d\u000afonts.scss - Font Face, Icon Fonts.\u000d\u000anormalize.scss - CSS reset for SCSS\u000d\u000a\u000d\u000aLayout:\u000d\u000aCreate individual SCSS files here for different sections of the website e.g header, footer, front-page etc.\u000d\u000a\u000d\u000aModules:\u000d\u000aCreate SCSS files for reusable modules or elements in the website e.g buttons, slideshows, galleries, forms etc.\u000d\u000a\u000d\u000aTools:\u000d\u000amixins.scss - Add your mixins here.\u000d\u000avariables.scss - Set your variables here, font colours, media queries etc.\u000d\u000a\u000d\u000aRemember when adding a file, you must also add it to `main.scss`.\u000d\u000a\u000d\u000aMedia Queries are set in _variables.scss and are called when needed. e.g:\u000d\u000a\u0009\u0009.myelement {\u000d\u000a\u0009\u0009\u0009color: red;\u000d\u000a\u0009\u0009\u0009\u000d\u000a\u0009\u0009\u0009@include media($medium) {\u000d\u000a\u0009\u0009\u0009\u0009color: blue;\u000d\u000a\u0009\u0009\u0009}\u000d\u000a\u0009\u0009}\u000d\u000a\u000d\u000aIncluded is Bourbon and Bourbon Neat (Grid System). These come with some helpful mixins and a handy grid system.\u000d\u000a[Bourbon](http://bourbon.io/docs/)\u000d\u000a[Bourbon Neat](http://thoughtbot.github.io/neat-docs/latest/)\u000d\u000a\u000d\u000aAny bug? [Let me know][18].\u000d\u000a\u000d\u000a\u000d\u000a[0]: http://nodejs.org/\u000d\u000a[1]: http://yeoman.io/\u000d\u000a[2]: http://bower.io/\u000d\u000a[3]: http://gruntjs.com/\u000d\u000a[4]: http://html5boilerplate.com/\u000d\u000a[5]: http://jade-lang.com/\u000d\u000a[6]: http://lesscss.org/\u000d\u000a[7]: http://purecss.io/\u000d\u000a[8]: https://jquery.org/\u000d\u000a[9]: https://angularjs.org/\u000d\u000a[10]: http://learnboost.github.io/stylus/\u000d\u000a[11]: http://sass-lang.com/\u000d\u000a[12]: https://github.com/rkgttr/generator-longtail\u000d\u000a[13]: #npm\u000d\u000a[14]: http://www.sublimetext.com/2\u000d\u000a[15]: https://sublime.wbond.net/\u000d\u000a[16]: http://git-scm.com/downloads\u000d\u000a[17]: http://localhost:8080/\u000d\u000a[18]: mailto:eguittiere@longtail.com.au\u000d\u000a\u000d\u000a","readmeFilename":"README.md","gitHead":"f75cb8c22d63ac33aba78adaf5332ad32dd4ecde","bugs":{"url":"https://github.com/rkgttr/generator-longtail/issues"},"homepage":"https://github.com/rkgttr/generator-longtail","_id":"generator-longtail@0.1.20","_shasum":"701bb5a2a42a4ffd15075fec950aeb154e75cede","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"rkgttr","email":"rkgttr@gmail.com"},"maintainers":[{"name":"rkgttr","email":"rkgttr@gmail.com"}],"dist":{"shasum":"701bb5a2a42a4ffd15075fec950aeb154e75cede","tarball":"http://registry.npmjs.org/generator-longtail/-/generator-longtail-0.1.20.tgz"}}: generator-longtail
42 error     at RegClient.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:308:14)
42 error     at Request._callback (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:246:65)
42 error     at Request.self.callback (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:236:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1142:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1096:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:943:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Windows_NT 6.1.7601
45 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
46 error cwd E:\Development\generator-longtail
47 error node -v v0.10.33
48 error npm -v 1.4.28
49 verbose exit [ 1, true ]
